---

- name: Create configuration backup folder on the new server
  ansible.builtin.file:
    path: /etc/gitlab/config_backup
    state: directory
    mode: '0700'

- name: Transfer configuration backup from the old server to the new server
  ansible.posix.synchronize:
    src: /etc/gitlab/config_backup/
    dest: /etc/gitlab/config_backup/
  delegate_to: oldServer

- name: Create copy of existing configuration
  ansible.builtin.copy:
    remote_src: true
    src: /etc/gitlab
    dest: /etc/gitlab.backup
    mode: "0775"

- name: Get configuration backup name
  ansible.builtin.shell: |
    set -o pipefail
    ls -t /etc/gitlab/config_backup/ | head -n1
  args:
    executable: /bin/bash
  register: configuration_backup_name
  changed_when: configuration_backup_name.rc != 0

- name: Extract configuration backup
  ansible.builtin.unarchive:
    src: "/etc/gitlab/config_backup/{{ configuration_backup_name['stdout_lines'][0] }}"
    remote_src: true
    dest: /

- name: Change base gitlab config
  ansible.builtin.include_tasks: common/setBaseGitlabConfig.yaml

- name: Block new CI/CD jobs
  ansible.builtin.include_tasks: common/blockCICD.yaml

- name: Gitlab reconfigure
  ansible.builtin.include_tasks: common/gitlabReconfigure.yaml

- name: Stop gitlab
  ansible.builtin.command: gitlab-ctl stop
  changed_when: true

- name: Remove dump.rdb
  ansible.builtin.file:
    path: /var/opt/gitlab/redis/dump.rdb
    state: absent

- name: Change file ownership, group and permissions
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    mode: '0700'
  loop:
    - /var/opt/gitlab/redis
    - /var/opt/gitlab/backups
